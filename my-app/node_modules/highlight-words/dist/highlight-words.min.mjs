const h=t=>e=>e!==null&&typeof e=="object"&&t in e,a=h("match"),i=t=>typeof t<"u";function g({curr:t,next:e,prev:r,clipBy:n=3}){const o=t.text.split(" "),s=o.length;if(t.match||n>=s)return t.text;const c="...";return i(e)&&i(r)&&a(r)&&a(e)?s>n*2?[...o.slice(0,n),c,...o.slice(-n)].join(" "):t.text:i(e)&&a(e)?[c,...o.slice(-n)].join(" "):i(r)&&a(r)?[...o.slice(0,n),c].join(" "):t.text}const u=t=>t.replace(/[|\\{}()[\]^$+*?.-]/g,e=>`\\${e}`),f=t=>t.replace(/\s{2,}/g," ").split(" ").join("|"),E=({terms:t,matchExactly:e=!1})=>{if(typeof t!="string")throw new TypeError("Expected a string");const r=u(t.trim());return`(${e?r:f(r)})`},w=({terms:t,matchExactly:e=!1})=>{try{const r=/^([/~@;%#'])(.*?)\1([gimsuy]*)$/.exec(t);return r?new RegExp(r[2],r[3]):new RegExp(E({terms:t,matchExactly:e}),"ig")}catch{throw new TypeError("Expected terms to be either a string or a RegExp!")}};let m=36,x="";for(;m--;)x+=m.toString(36);function y(t=11){let e="",r=t;for(;r--;)e+=x[Math.random()*36|0];return e}const j=t=>t.length>0,d=({text:t,query:e,clipBy:r,matchExactly:n=!1})=>{const o=typeof e=="string"?e.trim():e;if(o==="")return[{key:y(),text:t,match:!1}];const s=w({terms:e,matchExactly:n});return t.split(s).filter(j).map(c=>({key:y(),text:c,match:n?c.toLowerCase()===o.toLowerCase():s.test(c)})).map((c,l,p)=>({...c,...typeof r=="number"&&{text:g({curr:c,...l<p.length-1&&{next:p[l+1]},...l>0&&{prev:p[l-1]},clipBy:r})}}))};export{d as default};
//# sourceMappingURL=highlight-words.min.mjs.map
